// Generated by CoffeeScript 1.6.3
var EventEmitter, connect, exec, ssh2, stream, util;

util = require('util');

ssh2 = require('ssh2');

connect = require('./connect');

EventEmitter = require('events').EventEmitter;

stream = require('stream');

exec = require('child_process').exec;

/*
`exec([command], options, [callback])`
------------------------------------

Valid `options` properties are:   
-   `ssh`   SSH connection if the command must run remotely   
-   `cmd`   Command to run unless provided as first argument   
-   `cwd`   Current working directory   
-   `end`   Close the SSH connection on exit, default to true if an ssh connection instance is provided.   
-   `env`   An environment to use for the execution of the command.   
-   `pty`   Set to true to allocate a pseudo-tty with defaults, or an object containing specific pseudo-tty settings. Apply only to SSH remote commands.   
-   `cwd`   Apply only to local commands.   
-   `uid`   Apply only to local commands.   
-   `gid`   Apply only to local commands.
*/


module.exports = function(command, options, callback) {
  var child, cmdOptions, connection, run, stderr, stdout;
  if (typeof arguments[0] === 'string') {
    if (!(arguments.length === 3 || arguments.length === 2)) {
      return callback(new Error('Invalid arguments'));
    }
  } else {
    if (arguments.length === 2) {
      callback = options;
      options = command;
      command = options.cmd;
    } else if (arguments.length === 1) {
      options = command;
      command = options.cmd;
    } else {
      return callback(new Error('Invalid arguments'));
    }
  }
  if (options.ssh) {
    child = new EventEmitter;
    child.stdout = new stream.Readable;
    child.stdout._read = function(_size) {};
    child.stderr = new stream.Readable;
    child.stderr._read = function() {};
    connection = null;
    run = function() {
      var cmdOptions, exit, stderr, stdout;
      stdout = stderr = '';
      exit = false;
      if (options.cwd) {
        command = "cd " + options.cwd + "; " + command;
      }
      cmdOptions = {};
      if (options.env) {
        cmdOptions.env = options.env;
      }
      if (options.pty) {
        cmdOptions.pty = options.pty;
      }
      return connection.exec(command, cmdOptions, function(err, proc) {
        if (err && callback) {
          return callback(err);
        }
        proc.on('data', function(data, extended) {
          if (exit) {
            return;
          }
          if (extended === 'stderr') {
            child.stderr.push(data);
            if (callback) {
              return stderr += data;
            }
          } else {
            child.stdout.push(data);
            if (callback) {
              return stdout += data;
            }
          }
        });
        return proc.on('exit', function(code, signal) {
          return process.nextTick(function() {
            if (code !== 0) {
              if (stderr.trim().length) {
                err = stderr.trim().split('\n');
                err = err[err.length - 1];
              } else {
                err = 'Child process exited abnormally';
              }
              err = new Error(err);
              err.code = code;
              err.signal = signal;
            }
            exit = true;
            child.stdout.push(null);
            child.stderr.push(null);
            child.emit('exit', code);
            if (options.end) {
              connection.end();
              connection.on('error', function() {
                return callback(err);
              });
              return connection.on('close', function() {
                if (callback) {
                  return callback(err, stdout, stderr);
                }
              });
            } else {
              if (callback) {
                return callback(err, stdout, stderr);
              }
            }
          });
        });
      });
    };
    if (options.ssh instanceof ssh2) {
      connection = options.ssh;
      if (options.end == null) {
        options.end = false;
      }
      run();
    } else {
      connect(options.ssh, function(err, ssh2) {
        if (err) {
          if (callback) {
            callback(err);
          }
          return;
        }
        if (options.end == null) {
          options.end = true;
        }
        connection = ssh2;
        return run();
      });
    }
    return child;
  } else {
    cmdOptions = {};
    cmdOptions.env = options.env || process.env;
    cmdOptions.cwd = options.cwd || null;
    if (options.uid) {
      cmdOptions.uid = options.uid;
    }
    if (options.gid) {
      cmdOptions.gid = options.gid;
    }
    stdout = new stream.Readable;
    stderr = new stream.Readable;
    child = exec(command, cmdOptions, callback);
    child.stdout = stdout.wrap(child.stdout);
    child.stderr = stderr.wrap(child.stderr);
    return child;
  }
};
