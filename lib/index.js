// Generated by CoffeeScript 1.6.2
var EventEmitter, ProxyStream, Stream, connect, exec, ssh2, util;

util = require('util');

ssh2 = require('ssh2');

connect = require('./connect');

EventEmitter = require('events').EventEmitter;

Stream = require('stream');

exec = require('child_process').exec;

ProxyStream = function() {};

ProxyStream.prototype.pause = function() {
  return this.paused = true;
};

ProxyStream.prototype.resume = function() {
  this.paused = false;
  return this.emit('drain');
};

util.inherits(ProxyStream, Stream);

/*
`exec([command], options, [callback])`
------------------------------------

Valid `options` properties are:
-   *ssh*   SSH connection if the command must run remotely
-   *cmd*   Command to run unless provided as first argument
-   *cwd*   Current working directory
-   *env*   An environment to use for the execution of the command.
-   *pty*   Set to true to allocate a pseudo-tty with defaults, or an object containing specific pseudo-tty settings. Apply only to SSH remote commands.
-   *cwd*   Apply only to local commands.
-   *uid*   Apply only to local commands.
-   *gid*   Apply only to local commands.
*/


module.exports = function(command, options, callback) {
  var child, cmdOptions, connection, run;

  if (typeof arguments[0] === 'string') {
    if (!(arguments.length === 3 || arguments.length === 2)) {
      return callback(new Error('Invalid arguments'));
    }
  } else {
    if (arguments.length === 2) {
      callback = options;
      options = command;
      command = options.cmd;
    } else if (arguments.length === 1) {
      options = command;
      command = options.cmd;
    } else {
      return callback(new Error('Invalid arguments'));
    }
  }
  if (options.ssh) {
    child = new EventEmitter;
    child.stdout = new ProxyStream;
    child.stderr = new ProxyStream;
    connection = null;
    run = function() {
      var cmdOptions, stderr, stdout;

      stdout = stderr = '';
      if (options.cwd) {
        command = "cd " + options.cwd + "; " + command;
      }
      cmdOptions = {};
      if (options.env) {
        cmdOptions.env = options.env;
      }
      if (options.pty) {
        cmdOptions.pty = options.pty;
      }
      return connection.exec(command, cmdOptions, function(err, stream) {
        if (err) {
          if (callback) {
            callback(err);
          }
          return;
        }
        stream.on('data', function(data, extended) {
          var type;

          if (extended === 'stderr') {
            type = 'stderr';
            if (callback) {
              stderr += data;
            }
          } else {
            type = 'stdout';
            if (callback) {
              stdout += data;
            }
          }
          return child[type].emit('data', data);
        });
        return stream.on('exit', function(code, signal) {
          if (code !== 0) {
            err = new Error('Error');
            err.code = code;
            err.signal = signal;
          }
          child.emit('exit', code);
          if (callback) {
            return callback(null, stdout, stderr);
          }
        });
      });
    };
    if (options.ssh instanceof ssh2) {
      connection = options.ssh;
      run();
    } else {
      connect(options.ssh, function(err, ssh2) {
        if (err) {
          if (callback) {
            callback(err);
          }
          return;
        }
        connection = ssh2;
        return run();
      });
    }
    return child;
  } else {
    cmdOptions = {};
    cmdOptions.env = options.env || process.env;
    cmdOptions.cwd = options.cwd || null;
    if (options.uid) {
      cmdOptions.uid = options.uid;
    }
    if (options.gid) {
      cmdOptions.gid = options.gid;
    }
    return exec(command, cmdOptions, callback);
  }
};
