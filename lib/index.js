// Generated by CoffeeScript 1.4.0
var EventEmitter, ProxyStream, Stream, connect, exec, ssh2, util;

util = require('util');

ssh2 = require('ssh2');

connect = require('./connect');

EventEmitter = require('events').EventEmitter;

Stream = require('stream');

exec = require('child_process').exec;

ProxyStream = function() {};

ProxyStream.prototype.pause = function() {
  return this.paused = true;
};

ProxyStream.prototype.resume = function() {
  this.paused = false;
  return this.emit('drain');
};

util.inherits(ProxyStream, Stream);

module.exports = function(options, callback) {
  var child, cmdOptions, connection, run;
  if (options.ssh) {
    child = new EventEmitter;
    child.stdout = new ProxyStream;
    child.stderr = new ProxyStream;
    connection = null;
    run = function() {
      var stderr, stdout;
      stdout = stderr = '';
      return connection.exec(options.cmd, function(err, stream) {
        if (err) {
          console.log('error');
          if (callback) {
            callback(err);
          }
          return;
        }
        stream.on('data', function(data, extended) {
          var type;
          if (extended === 'stderr') {
            type = 'stderr';
            if (callback) {
              stderr += data;
            }
          } else {
            type = 'stdout';
            if (callback) {
              stdout += data;
            }
          }
          return child[type].emit('data', data);
        });
        return stream.on('exit', function(code, signal) {
          if (code !== 0) {
            err = new Error('Error');
            err.code = code;
            err.signal = signal;
          }
          child.emit('exit', code);
          if (callback) {
            return callback(null, stdout, stderr);
          }
        });
      });
    };
    if (options.ssh instanceof ssh2) {
      connection = options.ssh;
      run();
    } else {
      connect(options.ssh, function(err, ssh2) {
        if (err) {
          if (callback) {
            callback(err);
          }
          return;
        }
        connection = ssh2;
        return run();
      });
    }
    return child;
  } else {
    cmdOptions = {};
    cmdOptions.env = options.env || process.env;
    cmdOptions.cwd = options.cwd || null;
    if (options.uid) {
      cmdOptions.uid = options.uid;
    }
    if (options.gid) {
      cmdOptions.gid = options.gid;
    }
    return exec(options.cmd, cmdOptions, callback);
  }
};
